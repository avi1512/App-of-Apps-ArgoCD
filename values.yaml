argo-cd:

  configs:
    cm:
      create: true
      accounts.projenargoauthn: apiKey
      admin.enabled: false
      dex.config: |
        logger:
          level: debug
          format: json
        connectors:
        - type: saml
          id: saml
          name: saml
          config:
            entityIssuer: https://argocd.local.in/api/dex/callback
            ssoURL: https://login.microsoftonline.com/xxx-xxx-xxxx-xxxx/saml2
            caData: |
              <path:keyvault-name#argocd-saml-certificate>
            redirectURI: https://argocd.local.in/api/dex/callback
            usernameAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
            emailAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
            groupsAttr: admin-groups
      exec.enabled: false
      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
        jqPathExpressions:
        - '.webhooks[]?.clientConfig.caBundle'
      resource.customizations.ignoreDifferences.snapscheduler.backube_SnapshotSchedule: |
        jqPathExpressions:
        - '.spec.schedule'
      server.rbac.log.enforce.enable: false
      statusbadge.enabled: false
      timeout.hard.reconciliation: 0s
      timeout.reconciliation: 180s
      url: 'https://argocd.local.in'
  
    rbac:
      policy.default: 'role:readonly'
      policy.matchMode: glob
      scopes: '[groups, sub]'
      policy.csv: |
          p, role:admin, applications, *, */*, allow
          p, role:admin, clusters, *, *, allow
          p, role:admin, repositories, *, *, allow
          p, role:admin, projects, *, *, allow
          g, ES: admin, role:admin

          p, role:minimal-deployer, applications, get, *, allow
          p, role:minimal-deployer, applications, sync, *, allow
          g, projenargoauthn, role:minimal-deployer
        
    params:
      server.insecure: true

  global:
    domain: "argocd.local.in"

  server:
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
        nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
        nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "16k"
        nginx.ingress.kubernetes.io/proxy-buffering: "on"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
      hosts:
        - argocd.local.in
  extraObjects:
    #- apiVersion: spv.no/v2beta1
      #kind: AzureKeyVaultSecret
      #metadata:
        #name: argocd-secrets-azuread-oidc
        #labels:
          #app.kubernetes.io/part-of: argocd
      #spec:
        #vault:
          #name: kv-name
          #object:
            #contentType: application/x-json
            #name: azuread-oidc
            #type: multi-key-value-secret
        #output:
          #secret:
            #name: argocd-oidc-config
    - apiVersion: spv.no/v2beta1
      kind: AzureKeyVaultSecret
      metadata:
        name: argocd-secrets-azure-helm-credentials
        labels:
          app.kubernetes.io/part-of: argocd
          argocd.argoproj.io/secret-type: repo-creds
      spec:
        vault:
          name: kv-name
          object:
            contentType: application/x-json
            name: azure-helm-cred
            type: multi-key-value-secret
        output:
          secret:
            name: argocd-azure-helm-repo-creds
    - apiVersion: spv.no/v2beta1
      kind: AzureKeyVaultSecret
      metadata:
        name: argocd-secrets-vault-config
        labels:
          app.kubernetes.io/part-of: argocd
      spec:
        vault:
          name: kv-name
          object:
            contentType: application/x-json
            name: argocd-vault-config
            type: multi-key-value-secret
        output:
          secret:
            name: argocd-secrets-vault-config
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cmp-plugin
      data:
        plugin.yaml: |
          apiVersion: argoproj.io/v1alpha1
          kind: ConfigManagementPlugin
          metadata:
            name: argocd-vault-plugin-helm
          spec:
            allowConcurrency: true
            init:
              command:
                - "sh"
                - "-c"
                - "helm registry login $url -u $username -p $password && helm dependency build"
            discover:
              find:
                command:
                  - "sh"
                  - "-c"
                  - "find . -name 'Chart.yaml' && find . -name '*values.yaml'"
            generate:
              command:
                - "sh"
                - "-c"
                - "helm template $ARGOCD_APP_NAME --include-crds -n $ARGOCD_APP_NAMESPACE ${ARGOCD_ENV_HELM_ARGS} . | argocd-vault-plugin generate -s argocd-secrets-vault-config -"
            lockRepo: false
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: argocd-repo-server
        labels:
          app.kubernetes.io/component: repo-server
          app.kubernetes.io/instance: argocd
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: argocd-repo-server
          app.kubernetes.io/part-of: argocd
          argocd.argoproj.io/instance: argocd
          helm.sh/chart: argo-cd-7.3.11
      rules:
      - apiGroups: ["*"]
        resources: ["*"]
        verbs: ["*"]
      - nonResourceURLs: ["*"]
        verbs: ["*"]
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: argocd-repo-server
        labels:
          app.kubernetes.io/component: repo-server
          app.kubernetes.io/instance: argocd
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: argocd-repo-server
          app.kubernetes.io/part-of: argocd
          argocd.argoproj.io/instance: argocd
          helm.sh/chart: argo-cd-7.3.11
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: argocd-repo-server
      subjects:
      - kind: ServiceAccount
        name: argocd-repo-server
        namespace: argocd

### OIDC Config #####3
  #configs:
    #cm:
      #create: true
      #oidc.config: |
        #name: Azure AD
        #issuer: https://login.microsoftonline.com/xxxxx/v2.0
        #clientID: <Client-ID>
        #clientSecret: $argocd-oidc-config:azuread.clientSecret
        #requestedIDTokenClaims:
          #groups:
            #essential: true
        #requestedScopes:
          #- openid
          #- profile
          #- email
      #resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
        #jqPathExpressions:
        #- '.webhooks[]?.clientConfig.caBundle'
      #resource.customizations.ignoreDifferences.snapscheduler.backube_SnapshotSchedule: |
        #jqPathExpressions:
        #- '.spec.schedule'
    #rbac:
      #policy.default: "role:readonly"
    #Â Configuring our Internal Azure AD Group as admin
    #policy.csv: |
      #p, role:org-admin, applications, *, */*, allow
      #p, role:org-admin, clusters, get, *, allow
      #p, role:org-admin, repositories, *, *, allow
      #p, role:org-admin, logs, get, *, allow
      #p, role:org-admin, exec, create, */*, allow
      #g, "xxxx-xxxxx-xxxx-xxxx", role:org-admin
    #params:
      #server.insecure: true
  repoServer:
    # argo vault plugin
    volumes:
      - configMap:
          name: cmp-plugin
        name: cmp-plugin
      - name: custom-tools
        emptyDir: {}
      - name: tmp-dir
        emptyDir: {}
    initContainers:
    - name: download-tools
      image: alpine:3.8
      command: [sh, -c]
      # Don't forget to update this to whatever the stable release version is
      # Note the lack of the `v` prefix unlike the git tag
      env:
        - name: AVP_VERSION
          value: "1.18.1"
      args:
        - >-
          wget -O argocd-vault-plugin
          https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
    extraContainers:
      - name: avp-helm
        command: [/var/run/argocd/argocd-cmp-server]
        image: quay.io/argoproj/argocd:v2.4.8
        envFrom:
          - secretRef:
              name: argocd-azure-helm-repo-creds
          - secretRef:
              name: argocd-secrets-vault-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp-dir
          - mountPath: /home/argocd/cmp-server/config
            name: cmp-plugin
          - name: custom-tools
            subPath: argocd-vault-plugin
            mountPath: /usr/local/bin/argocd-vault-plugin